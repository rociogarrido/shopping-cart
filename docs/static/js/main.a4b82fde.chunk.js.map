{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","CartItem/CartItem.styles.ts","CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","acc","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"qPAEaA,EAAUC,IAAOC,IAAV,qf,OCyBLC,EAhBe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,gBAAT,OACtB,eAACL,EAAD,WACI,qBAAKM,IAAKF,EAAKG,MAAOC,IAAKJ,EAAKK,QAChC,gCACI,6BAAKL,EAAKK,QACV,4BAAIL,EAAKM,cACT,kCAAKN,EAAKO,YAEd,cAACC,EAAA,EAAD,CACQC,QAAS,kBAAMR,EAAgBD,IADvC,6BCjBCJ,EAAUC,IAAOC,IAAV,kZCwCLY,EA9BmB,SAAC,GAAD,IAAGV,EAAH,EAAGA,KAAMW,EAAT,EAASA,UAAWC,EAApB,EAAoBA,eAApB,OAC9B,eAAC,EAAD,WACI,gCACI,6BAAKZ,EAAKK,QACV,sBAAKQ,UAAU,cAAf,UACI,yCAAYb,EAAKO,SACjB,0CAAaP,EAAKc,OAASd,EAAKO,OAAOQ,QAAQ,SAEnD,sBAAKF,UAAU,UAAf,UACI,cAACL,EAAA,EAAD,CACIQ,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YACRT,QAAS,kBAAMG,EAAeZ,EAAKmB,KAJvC,eAOA,4BAAInB,EAAKc,SACT,cAACN,EAAA,EAAD,CACIQ,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YACRT,QAAS,kBAAME,EAAUX,IAJ7B,qBASR,qBAAKE,IAAKF,EAAKG,MAAOC,IAAKJ,EAAKK,YCpC3BT,EAAUC,IAAOuB,MAAV,qHC+BLC,EArBe,SAAC,GAA8C,IACnDC,EADOC,EAA2C,EAA3CA,UAAWZ,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAInD,OACI,eAAC,EAAD,WACE,oDACsB,IAArBW,EAAUC,OAAe,kDAA2B,KACpDD,EAAUE,KAAI,SAAAzB,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNW,UAAWA,EACXC,eAAgBA,GAHXZ,EAAKmB,OAMd,2CAfgBG,EAeYC,EAdlCD,EAAMI,QAAO,SAACC,EAAa3B,GAAd,OAAuB2B,EAAM3B,EAAKc,OAASd,EAAKO,QAAO,IAcvBQ,QAAQ,U,8DCzB5CnB,EAAUC,IAAOC,IAAV,+CAIP8B,EAAe/B,YAAOgC,IAAPhC,CAAH,uGCiBnBiC,EAAW,uCAAG,sBAAAC,EAAA,sEACLC,MAAM,qCADD,8BACuCC,OADvC,mFAAH,qDAkFFC,MA/Ef,WACE,IAOuBZ,EAPvB,EAAgCa,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBe,EAAlB,KAEA,EAAmCC,YAAyB,WAAYT,GAAhEU,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,MAOnBzC,EAAkB,SAAC0C,GACvBL,GAAa,SAAAM,GAKX,OAHqBA,EAAKC,MAAK,SAAA7C,GAAI,OAAIA,EAAKmB,KAAOwB,EAAYxB,MAItDyB,EAAKnB,KAAI,SAAAzB,GAAI,OAClBA,EAAKmB,KAAOwB,EAAYxB,GAAxB,2BACSnB,GADT,IACec,OAAQd,EAAKc,OAAS,IACjCd,KAKF,GAAN,mBAAW4C,GAAX,4BAAsBD,GAAtB,IAAmC7B,OAAQ,UAoB/C,OAAI2B,EACK,cAACK,EAAA,EAAD,IAELJ,EACK,0DAIP,eAAC,EAAD,WACE,cAACK,EAAA,EAAD,CAAQC,OAAO,QAAQC,KAAMb,EAAUc,QAAS,kBAAMb,GAAY,IAAlE,SACE,cAAC,EAAD,CACEd,UAAWA,EACXZ,UAAWV,EACXW,eA5BqB,SAACO,GAC5BmB,GAAa,SAAAM,GAAI,OACfA,EAAKlB,QAAO,SAACC,EAAK3B,GAChB,OAAIA,EAAKmB,KAAOA,EACM,IAAhBnB,EAAKc,OACAa,EAEH,GAAN,mBAAWA,GAAX,4BAAqB3B,GAArB,IAA2Bc,OAAQd,EAAKc,OAAS,MAE3C,GAAN,mBAAWa,GAAX,CAAgB3B,MAEjB,YAoBH,cAAC4B,EAAD,CAAcnB,QAAS,kBAAM4B,GAAY,IAAzC,SACE,cAACc,EAAA,EAAD,CAAOC,cAvDU9B,EAuDkBC,EAtDvCD,EAAMI,QAAO,SAACC,EAAa3B,GAAd,OAAuB2B,EAAM3B,EAAKc,SAAQ,IAsDJuC,MAAM,QAArD,SACE,cAAC,IAAD,QAIJ,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,gBACGhB,QADH,IACGA,OADH,EACGA,EAAMf,KAAI,SAACzB,GAAD,OACT,cAACsD,EAAA,EAAD,CAAMtD,MAAI,EAAeyD,GAAI,GAAIC,GAAI,EAArC,SACE,cAAC,EAAD,CAAM1D,KAAMA,EAAMC,gBAAiBA,KADrBD,EAAKmB,a,iBC5FzBwC,EAAS,IAAIC,IAEnBC,IAASC,OACL,cAACC,EAAA,EAAD,CAAqBJ,OAAQA,EAA7B,SACA,cAAC,EAAD,MAEAK,SAASC,eAAe,W","file":"static/js/main.a4b82fde.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 100%;\n    border: 1px solid lightblue;\n    border-radius: 20px;\n    height: 100%;\n\n    button {\n      border-radius: 0 0 20px 20px;\n    }\n    \n    img {\n      max-height: 250px;\n      object-fit: cover;\n      border-radius: 20px 20px 0 0;\n    }\n    \n    div {\n      font-family: Arial, Helvetica, sans-serif;\n      padding: 1rem;\n      height: 100%;\n    }\n`;","import Button from '@material-ui/core/Button';\n// Types\nimport { CartItemType } from \"../App\";\n// Styles\nimport { Wrapper } from \"./Item.styles\";\n\ntype Props = {\n    item: CartItemType;\n    handleAddToCart: (clickedItem: CartItemType) => void;\n};\n\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\n        <Wrapper>\n            <img src={item.image} alt={item.title} />\n            <div>\n                <h3>{item.title}</h3>\n                <p>{item.description}</p>\n                <p>${item.price}</p>\n            </div>\n            <Button\n                    onClick={() => handleAddToCart(item)}\n                >\n                    Add to cart\n                </Button> \n        </Wrapper>\n    )\n\nexport default Item;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 20px;\n\n  div {\n    flex: 1;\n  }\n\n  .information,\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n\n  img {\n    max-width: 80px;\n    object-fit: cover;\n    margin-left: 40px;\n  }\n`;","import Button from '@material-ui/core/Button';\n// Types \nimport { CartItemType } from \"../App\";\n// Styles\nimport { Wrapper } from \"./CartItem.styles\";\n\ntype Props = {\n    item: CartItemType,\n    addToCart: (clickedItem: CartItemType) => void;\n    removeFromCart: (id: number) => void;\n}\n\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => (\n    <Wrapper>\n        <div>\n            <h3>{item.title}</h3>\n            <div className=\"information\">\n                <p>Price: ${item.price}</p>\n                <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\n            </div>\n            <div className=\"buttons\">\n                <Button\n                    size=\"small\"\n                    disableElevation\n                    variant=\"contained\"\n                    onClick={() => removeFromCart(item.id)}>\n                - \n                </Button>\n                <p>{item.amount}</p>\n                <Button\n                    size=\"small\"\n                    disableElevation\n                    variant=\"contained\"\n                    onClick={() => addToCart(item)}>\n                +\n                </Button>\n            </div>\n        </div>\n        <img src={item.image} alt={item.title} />\n    </Wrapper>\n);\n\nexport default CartItem;","import styled from 'styled-components';\n\nexport const Wrapper = styled.aside`\n    font-family: Arial, Helvetica, sans-serif;\n    width: 500px;\n    padding: 20px;\n  `;","import CartItem from \"../CartItem/CartItem\";\n// Styles\nimport { Wrapper } from \"./Cart.styles\";\n// Types\nimport { CartItemType } from \"../App\";\n\ntype Props = {\n    cartItems: CartItemType[];\n    addToCart: (clickedItem: CartItemType) => void;\n    removeFromCart: (id: number) => void;\n}\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n  const calculateTotal = (items: CartItemType[]) => \n    items.reduce((acc: number, item) => acc + item.amount * item.price, 0);\n\n    return (\n        <Wrapper>\n          <h2>Your Shopping Cart</h2>\n          {cartItems.length === 0 ? <p>No items in cart.</p> : null}\n          {cartItems.map(item => (\n            <CartItem\n              key={item.id}\n              item={item}\n              addToCart={addToCart}\n              removeFromCart={removeFromCart}\n            />\n          ))}\n          <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2> \n        </Wrapper>\n      );\n    };\n\nexport default Cart;","import styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const Wrapper = styled.div`\n    margin: 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n    position: fixed;\n    z-index: 100;\n    right: 20px;\n    top: 20px;\n`\n","import { useState } from 'react';\nimport { useQuery} from \"react-query\";\n// Components\nimport Item from \"./Item/Item\";\nimport Cart from \"./Cart/Cart\";\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\n// Styles\nimport { Wrapper, StyledButton } from './App.styles';\n// Types\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\n\nconst getProducts = async (): Promise<CartItemType[]> =>\n  await (await fetch('https://fakestoreapi.com/products')).json();\n\nfunction App() {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\"products\", getProducts);\n  // console.log(data);\n\n\n  const getTotalItems = (items: CartItemType[]) => \n    items.reduce((acc: number, item) => acc + item.amount, 0);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems(prev => {\n      // 1. Is the item already in the cart?\n      const isItemInCart = prev.find(item => item.id === clickedItem.id);\n\n      // 2. If it is, increase the amount\n      if (isItemInCart) {\n        return prev.map(item =>\n          item.id === clickedItem.id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n\n      // 3. If it's not, add it\n      return [...prev, { ...clickedItem, amount: 1 }];\n    })\n    ;\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev => \n      prev.reduce((acc, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) {\n            return acc;\n          }\n          return [...acc, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...acc, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  if (isLoading) {\n    return <LinearProgress />;\n  }\n  if (error) {\n    return <div>Something went wrong...</div>;\n  }\n  \n  return (\n    <Wrapper>\n      <Drawer anchor=\"right\" open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart \n          cartItems={cartItems} \n          addToCart={handleAddToCart} \n          removeFromCart={handleRemoveFromCart}\n          />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color=\"error\">\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n\n      <Grid container spacing={3}>\n        {data?.map((item: CartItemType) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n    <QueryClientProvider client={client}>\n    <App />\n    </QueryClientProvider>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}